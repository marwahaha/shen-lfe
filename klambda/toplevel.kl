"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (shen.toplevel-display-exception E))) (shen.loop)))))

(defun shen.toplevel-display-exception (V3934) (pr (error-to-string V3934) (stoutput)))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3936) (cond ((= () V3936) ()) ((and (cons? V3936) (cons? (tl V3936))) (do (set (hd V3936) (hd (tl V3936))) (shen.multiple-set (tl (tl V3936))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V3938) (declare V3938 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V3950 V3951) (cond ((and (tuple? V3950) (and (cons? (snd V3950)) (element? (hd (snd V3950)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V3950) (tl (snd V3950))) V3951)) ((and (tuple? V3950) (and (cons? (snd V3950)) (and (cons? (tl (snd V3950))) (and (= () (tl (tl (snd V3950)))) (and (cons? V3951) (and (= (hd (snd V3950)) (shen.exclamation)) (= (hd (tl (snd V3950))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V3951))) (hd V3951))) ((and (tuple? V3950) (and (cons? (snd V3950)) (= (hd (snd V3950)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V3950)) V3951) (let Find (head (shen.find-past-inputs Key? V3951)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V3950) (and (cons? (snd V3950)) (and (= () (tl (snd V3950))) (= (hd (snd V3950)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V3951) 0) (abort))) ((and (tuple? V3950) (and (cons? (snd V3950)) (= (hd (snd V3950)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V3950)) V3951) (let Pastprint (shen.print-past-inputs Key? (reverse V3951) 0) (abort)))) (true V3950)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V3953) (do (shen.for-each (lambda Byte (pr (n->string Byte) (stoutput))) V3953) (nl 1)))

(defun shen.update_history (V3956 V3957) (set shen.*history* (cons V3956 V3957)))

(defun shen.toplineread () (shen.toplineread_loop (shen.read-char-code (stinput)) ()))

(defun shen.toplineread_loop (V3961 V3962) (cond ((= V3961 (shen.hat)) (simple-error "line read aborted")) ((element? V3961 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V3962 (lambda E shen.nextline)) (let It (shen.record-it V3962) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (shen.read-char-code (stinput)) (append V3962 (cons V3961 ()))) (@p Line V3962))))) (true (shen.toplineread_loop (shen.read-char-code (stinput)) (if (= V3961 -1) V3962 (append V3962 (cons V3961 ())))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V3968) (cond ((= + V3968) (set shen.*tc* true)) ((= - V3968) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3970) (shen.toplevel_evaluate V3970 (value shen.*tc*)))

(defun shen.find-past-inputs (V3973 V3974) (let F (shen.find V3973 V3974) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3977 V3978) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3977 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3978)))) (lambda X (shen.prefix? V3977 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3980) (cond ((and (cons? V3980) (= (hd V3980) (shen.space))) (shen.trim-gubbins (tl V3980))) ((and (cons? V3980) (= (hd V3980) (shen.newline))) (shen.trim-gubbins (tl V3980))) ((and (cons? V3980) (= (hd V3980) (shen.carriage-return))) (shen.trim-gubbins (tl V3980))) ((and (cons? V3980) (= (hd V3980) (shen.tab))) (shen.trim-gubbins (tl V3980))) ((and (cons? V3980) (= (hd V3980) (shen.left-round))) (shen.trim-gubbins (tl V3980))) (true V3980)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3989 V3990) (cond ((= () V3990) ()) ((and (cons? V3990) (V3989 (hd V3990))) (cons (hd V3990) (shen.find V3989 (tl V3990)))) ((cons? V3990) (shen.find V3989 (tl V3990))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V4004 V4005) (cond ((= () V4004) true) ((and (cons? V4004) (and (cons? V4005) (= (hd V4005) (hd V4004)))) (shen.prefix? (tl V4004) (tl V4005))) (true false)))

(defun shen.print-past-inputs (V4017 V4018 V4019) (cond ((= () V4018) _) ((and (cons? V4018) (not (V4017 (hd V4018)))) (shen.print-past-inputs V4017 (tl V4018) (+ V4019 1))) ((and (cons? V4018) (tuple? (hd V4018))) (do (shen.prhush (shen.app V4019 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V4018))) (shen.print-past-inputs V4017 (tl V4018) (+ V4019 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V4022 V4023) (cond ((and (cons? V4022) (and (cons? (tl V4022)) (and (= : (hd (tl V4022))) (and (cons? (tl (tl V4022))) (and (= () (tl (tl (tl V4022)))) (= true V4023)))))) (shen.typecheck-and-evaluate (hd V4022) (hd (tl (tl V4022))))) ((and (cons? V4022) (cons? (tl V4022))) (do (shen.toplevel_evaluate (cons (hd V4022) ()) V4023) (do (nl 1) (shen.toplevel_evaluate (tl V4022) V4023)))) ((and (cons? V4022) (and (= () (tl V4022)) (= true V4023))) (shen.typecheck-and-evaluate (hd V4022) (gensym A))) ((and (cons? V4022) (and (= () (tl V4022)) (= false V4023))) (let Eval (shen.eval-without-macros (hd V4022)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V4026 V4027) (let Typecheck (shen.typecheck V4026 V4027) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V4026) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V4029) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V4029) V4029))

(defun shen.extract-pvars (V4035) (cond ((shen.pvar? V4035) (cons V4035 ())) ((cons? V4035) (union (shen.extract-pvars (hd V4035)) (shen.extract-pvars (tl V4035)))) (true ())))

(defun shen.mult_subst (V4043 V4044 V4045) (cond ((= () V4043) V4045) ((= () V4044) V4045) ((and (cons? V4043) (cons? V4044)) (shen.mult_subst (tl V4043) (tl V4044) (subst (hd V4043) (hd V4044) V4045))) (true (shen.f_error shen.mult_subst))))



