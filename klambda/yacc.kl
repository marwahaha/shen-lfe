"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4274) (cond ((and (cons? V4274) (and (= defcc (hd V4274)) (cons? (tl V4274)))) (shen.yacc->shen (hd (tl V4274)) (tl (tl V4274)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4277 V4278) (let CCRules (shen.split_cc_rules true V4278 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4277 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4280) (cond ((> (occurrences kill V4280) 0) (cons trap-error (cons V4280 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4280)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4282) (let String (error-to-string V4282) (if (= String "yacc kill") (fail) V4282)))

(defun shen.split_cc_rules (V4288 V4289 V4290) (cond ((and (= () V4289) (= () V4290)) ()) ((= () V4289) (cons (shen.split_cc_rule V4288 (reverse V4290) ()) ())) ((and (cons? V4289) (= ; (hd V4289))) (cons (shen.split_cc_rule V4288 (reverse V4290) ()) (shen.split_cc_rules V4288 (tl V4289) ()))) ((cons? V4289) (shen.split_cc_rules V4288 (tl V4289) (cons (hd V4289) V4290))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4298 V4299 V4300) (cond ((and (cons? V4299) (and (= := (hd V4299)) (and (cons? (tl V4299)) (= () (tl (tl V4299)))))) (cons (reverse V4300) (tl V4299))) ((and (cons? V4299) (and (= := (hd V4299)) (and (cons? (tl V4299)) (and (cons? (tl (tl V4299))) (and (= where (hd (tl (tl V4299)))) (and (cons? (tl (tl (tl V4299)))) (= () (tl (tl (tl (tl V4299))))))))))) (cons (reverse V4300) (cons (cons where (cons (hd (tl (tl (tl V4299)))) (cons (hd (tl V4299)) ()))) ()))) ((= () V4299) (do (shen.semantic-completion-warning V4298 V4300) (shen.split_cc_rule V4298 (cons := (cons (shen.default_semantics (reverse V4300)) ())) V4300))) ((cons? V4299) (shen.split_cc_rule V4298 (tl V4299) (cons (hd V4299) V4300))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4311 V4312) (cond ((= true V4311) (do (shen.prhush "warning: " (stoutput)) (do (shen.for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4312)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4314) (cond ((= () V4314) ()) ((and (cons? V4314) (and (= () (tl V4314)) (shen.grammar_symbol? (hd V4314)))) (hd V4314)) ((and (cons? V4314) (shen.grammar_symbol? (hd V4314))) (cons append (cons (hd V4314) (cons (shen.default_semantics (tl V4314)) ())))) ((cons? V4314) (cons cons (cons (hd V4314) (cons (shen.default_semantics (tl V4314)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4316) (and (symbol? V4316) (let Cs (shen.strip-pathname (explode V4316)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4318) (cond ((and (cons? V4318) (= () (tl V4318))) (hd V4318)) ((cons? V4318) (let P YaccParse (cons let (cons P (cons (hd V4318) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4318)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4320) (cond ((and (cons? V4320) (and (cons? (tl V4320)) (= () (tl (tl V4320))))) (shen.syntax (hd V4320) Stream (hd (tl V4320)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4324 V4325 V4326) (cond ((and (= () V4324) (and (cons? V4326) (and (= where (hd V4326)) (and (cons? (tl V4326)) (and (cons? (tl (tl V4326))) (= () (tl (tl (tl V4326))))))))) (cons if (cons (shen.semantics (hd (tl V4326))) (cons (cons shen.pair (cons (cons hd (cons V4325 ())) (cons (shen.semantics (hd (tl (tl V4326)))) ()))) (cons (cons fail ()) ()))))) ((= () V4324) (cons shen.pair (cons (cons hd (cons V4325 ())) (cons (shen.semantics V4326) ())))) ((cons? V4324) (if (shen.grammar_symbol? (hd V4324)) (shen.recursive_descent V4324 V4325 V4326) (if (variable? (hd V4324)) (shen.variable-match V4324 V4325 V4326) (if (shen.jump_stream? (hd V4324)) (shen.jump_stream V4324 V4325 V4326) (if (shen.terminal? (hd V4324)) (shen.check_stream V4324 V4325 V4326) (if (cons? (hd V4324)) (shen.list-stream (shen.decons (hd V4324)) (tl V4324) V4325 V4326) (simple-error (shen.app (hd V4324) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4331 V4332 V4333 V4334) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4333 ())) ())) (cons (cons cons? (cons (cons shen.hdhd (cons V4333 ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4332 (cons shen.pair (cons (cons shen.tlhd (cons V4333 ())) (cons (cons shen.hdtl (cons V4333 ())) ()))) V4334) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4331 (cons shen.pair (cons (cons shen.hdhd (cons V4333 ())) (cons (cons shen.hdtl (cons V4333 ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4336) (cond ((and (cons? V4336) (and (= cons (hd V4336)) (and (cons? (tl V4336)) (and (cons? (tl (tl V4336))) (and (= () (hd (tl (tl V4336)))) (= () (tl (tl (tl V4336))))))))) (cons (hd (tl V4336)) ())) ((and (cons? V4336) (and (= cons (hd V4336)) (and (cons? (tl V4336)) (and (cons? (tl (tl V4336))) (= () (tl (tl (tl V4336)))))))) (cons (hd (tl V4336)) (shen.decons (hd (tl (tl V4336)))))) (true V4336)))

(defun shen.insert-runon (V4351 V4352 V4353) (cond ((and (cons? V4353) (and (= shen.pair (hd V4353)) (and (cons? (tl V4353)) (and (cons? (tl (tl V4353))) (and (= () (tl (tl (tl V4353)))) (= (hd (tl (tl V4353))) V4352)))))) V4351) ((cons? V4353) (map (lambda Z (shen.insert-runon V4351 V4352 Z)) V4353)) (true V4353)))

(defun shen.strip-pathname (V4359) (cond ((not (element? "." V4359)) V4359) ((cons? V4359) (shen.strip-pathname (tl V4359))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4363 V4364 V4365) (cond ((cons? V4363) (let Test (cons (hd V4363) (cons V4364 ())) (let Action (shen.syntax (tl V4363) (concat Parse_ (hd V4363)) V4365) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4363)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4363)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4369 V4370 V4371) (cond ((cons? V4369) (let Test (cons cons? (cons (cons hd (cons V4370 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4369)) (cons (cons shen.hdhd (cons V4370 ())) (cons (shen.syntax (tl V4369) (cons shen.pair (cons (cons shen.tlhd (cons V4370 ())) (cons (cons shen.hdtl (cons V4370 ())) ()))) V4371) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4381) (cond ((cons? V4381) false) ((variable? V4381) false) (true true)))

(defun shen.jump_stream? (V4387) (cond ((= V4387 _) true) (true false)))

(defun shen.check_stream (V4391 V4392 V4393) (cond ((cons? V4391) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4392 ())) ())) (cons (cons = (cons (hd V4391) (cons (cons shen.hdhd (cons V4392 ())) ()))) ()))) (let NewStr (gensym NewStream) (let Action (cons let (cons NewStr (cons (cons shen.pair (cons (cons shen.tlhd (cons V4392 ())) (cons (cons shen.hdtl (cons V4392 ())) ()))) (cons (shen.syntax (tl V4391) NewStr V4393) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ()))))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4397 V4398 V4399) (cond ((cons? V4397) (let Test (cons cons? (cons (cons hd (cons V4398 ())) ())) (let Action (shen.syntax (tl V4397) (cons shen.pair (cons (cons shen.tlhd (cons V4398 ())) (cons (cons shen.hdtl (cons V4398 ())) ()))) V4399) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4401) (cond ((= () V4401) ()) ((shen.grammar_symbol? V4401) (cons shen.hdtl (cons (concat Parse_ V4401) ()))) ((variable? V4401) (concat Parse_ V4401)) ((cons? V4401) (map (lambda Z (shen.semantics Z)) V4401)) (true V4401)))

(defun shen.pair (V4404 V4405) (cons V4404 (cons V4405 ())))

(defun shen.hdtl (V4407) (hd (tl V4407)))

(defun shen.hdhd (V4409) (hd (hd V4409)))

(defun shen.tlhd (V4411) (tl (hd V4411)))

(defun shen.snd-or-fail (V4419) (cond ((and (cons? V4419) (and (cons? (tl V4419)) (= () (tl (tl V4419))))) (hd (tl V4419))) (true (fail))))

(defun fail () shen.fail!)(defun <!> (V4427) (cond ((and (cons? V4427) (and (cons? (tl V4427)) (= () (tl (tl V4427))))) (cons () (cons (hd V4427) ()))) (true (fail))))

(defun <e> (V4433) (cond ((and (cons? V4433) (and (cons? (tl V4433)) (= () (tl (tl V4433))))) (cons (hd V4433) (cons () ()))) (true (shen.f_error <e>))))



